ssh-keygen -t rsa -b 4096 -C "your_email@example.com"
openssl req -x509 -sha256 -nodes -days 30 -newkey rsa:2048 -subj '/O=<o>/CN=<cn>' -keyout rootca.key -out rootca.crt
openssl req -out <csr-file>.csr -newkey rsa:2048 -nodes -keyout <key-name>.key -subj "/CN=*.ocp.example.com/O=<o>"
openssl x509 -req -days 30 -CA rootca.crt -CAkey rootca.key -set_serial 0 -in <csr-file>.csr -out <crt-file>.crt

oc get secret gateway-cert -n istio-system
oc describe secret gateway-cert -n istio-system
oc get secret gateway-cert -n istio-system -o json | jq -r '.data."key"' | base64 -d > key.key
oc get secret gateway-cert -n istio-system -o json | jq -r '.data."cert"' | base64 -d > cert.crt
oc get secret gateway-cert -n istio-system -o json | jq -r '.data."cacert"' | base64 -d > cacert.crt
oc edit smmr -n istio-system
oc get smcp -n istio-system
oc new-build --name http-server --binary
oc start-build http-server --from-dir=http-build --follow --wait
oc get pod $POD -o yaml | grep containerPort: -A5
oc get mutatingwebhookconfiguration istio-sidecar-injector -o yaml -n istio-system | grep "namespaceSelector:" -A5  
oc patch deployment/webserver -p '{"spec":{"template":{"metadata":{"annotations":{"sidecar.istio.io/inject": "'true'"}}}}}'


ISTIO_INGRESS=$(oc get pod -n istio-system --no-headers -o custom-columns=":metadata.name" | grep istio-ingressgateway)
POD=$(oc get pods --no-headers -o custom-columns=":metadata.name" | grep http-server)

oc logs -n istio-system "$(oc get pod -l istio=ingressgateway -n istio-system -o jsonpath='{.items[0].metadata.name}')"
oc -n istio-system exec -it "$(oc get pod -l istio=ingressgateway -n istio-system -o jsonpath='{.items[0].metadata.name}')" -- /bin/sh

oc create secret generic gateway-certs -n istio-system --from-file=key=key.key --from-file=cert=cert.crt --from-file=cacert=cacert.crt

oc create secret generic gateway-cert -n istio-system --from-file=private-key.pem --from-file=cert=ec-cert.crt
oc create secret tls gateway-cert -n istio-system --key=dev-ocp.key --cert=dev-ocp.crt

oc get secret $s -n openshift-ingress -o yaml | sed "s/$ons/$nns/g" | sed "s/$on/$nn/g" | oc apply -f -

oc adm policy add-role-to-user edit $(oc get user --no-headers -o jsonpath='{range .items[*]}{.metadata.name}={.fullName}{"\n"}{end}' | grep $user | awk -F"=" '{print $1}')
oc adm groups add-users users $(oc get user --no-headers -o jsonpath='{range .items[*]}{.metadata.name}={.fullName}{"\n"}{end}' | grep $user | awk -F"=" '{print $1}')

oc edit svc istio-ingressgateway -n istio-system 
oc edit route istio-ingressgateway -n istio-system

$(oc get pod -l app=$a --no-headers -o jsonpath='{.items[0].metadata.name}')

ip=$(oc get pod -l app=$a -o jsonpath='{.items[0].status.podIP}' -n $ns)
echo $ip 
oc rsh -n istio-system "$(oc get pod -l istio=ingressgateway -n istio-system -o jsonpath='{.items[0].metadata.name}')"
openssl s_client -showcerts -connect $ip:8443

oc exec -it $(oc get pod -l app=$a -n $ns -o jsonpath='{.items[0].metadata.name}') -- /bin/sh

oc patch deploy $d -p '{"spec":{"template":{"metadata":{"annotations":{"kubectl.kubernetes.io/restartedAt": "'`date -Iseconds`'"}}}}}'
oc patch deploy $d -p '{"spec":{"template":{"metadata":{"annotations":{"sidecar.istio.io/rewriteAppHTTPProbers": "'true'"}}}}}'
oc patch deploy $d -p '{"spec":{"template":{"metadata":{"annotations":{"sidecar.istio.io/inject": "'true'"}}}}}'

oc get pods --field-selector 'status.phase=Running'

ior=$(oc get route -n istio-system --no-headers -o=jsonpath='{.items[?(@.metadata.annotations.maistra\.io/original-host=="<hostname>")].metadata.name}')
oc describe route $ior -n istio-system
oc patch route $ior -n istio-system -p '{"spec":{"port":{"targetPort": 8443}}}'
oc delete route $ior

for r in $(oc get route -n istio-system --no-headers -o=jsonpath='{.items[?(@.metadata.labels.maistra\.io/gateway-namespace=="<namespace>")].metadata.name}'); do oc delete route $r -n istio-system; done
for r in $(oc get route -n istio-system --no-headers -o=jsonpath='{.items[?(@.metadata.labels.app\.kubernetes\.io/namespace=="<namespace>")].metadata.name}'); do oc delete route $r -n istio-system; done

for file in file/path/; do oc apply -f $file ; done
for route in $(oc get route --no-headers -o jsonpath='{.items[*].metadata.name}'); do oc delete route $route; done
for d in $(oc -n $ns get dc --no-headers -o jsonpath='{.items[*].metadata.name}'); do oc -n $ns patch dc $d -p '{"spec":{"template":{"metadata":{"annotations":{"sidecar.istio.io/inject": "'false'"}}}}}'; done
for d in $(oc -n $ns get deploy --no-headers -o jsonpath='{.items[*].metadata.name}'); do oc -n $ns patch deploy $d -p '{"spec":{"template":{"metadata":{"annotations":{"sidecar.istio.io/inject": "'true'"}}}}}'; done

for d in $(oc -n $ns get deploy --no-headers -o jsonpath='{.items[*].metadata.name}'); do oc -n $ns patch deploy $d -p '{"spec":{"template":{"metadata":{"annotations":{"kubectl.kubernetes.io/restartedAt": "'`date -Iseconds`'"}}}}}'; done

oc adm top node
-- oc describe node -l node-role.kubernetes.io/infra="" | grep -e Capacity: -A13
-- for n in $(oc get node --no-headers | awk {'print $1'}); do echo $n; oc describe node $n | grep Capacity: -A13; done
-- for n in $(oc get node --no-headers -o jsonpath='{.items[*].metadata.name}' --sort-by='{.metadata.name}'); do echo $n; oc describe node $n | grep Capacity: -A13; done
for n in $(oc get node -l node-role.kubernetes.io/infra="",cluster.ocs.openshift.io/openshift-storage!="" --no-headers -o jsonpath='{.items[*].metadata.name}'); do printf "Node: $n\n"; printf "  Capacity:\n    "; oc get node $n --no-headers -o jsonpath='{.status.capacity}'; printf "\n  Allocatable:\n    "; oc get node $n --no-headers -o jsonpath='{.status.allocatable}'; printf "\n"; done

oc get smmr -n istio-system -o json | jq ".items[0].spec.members += [\"$ns\"]" | oc apply -f -

for n in $(oc get node -l node-role.kubernetes.io/infra="",cluster.ocs.openshift.io/openshift-storage!="" --no-headers -o jsonpath='{.items[*].metadata.name}'); do oc label node $n type=user-node; oc label node $n region=primary; done

for i in $(oc get image -o jsonpath='{.items[?(@.dockerImageMetadata.Config.Labels.info\.image\.name=="registry.repo.url/namespace/image-name")].metadata.name}'); do oc describe image $i; printf "\n\n";  done | less

sudo podman login -u aliv -p $(oc whoami -t) $(oc describe image.config.openshift.io cluster | grep "  Internal Registry Hostname:  " | sed 's/  Internal Registry Hostname:  //g')
for i in $(oc get image -o jsonpath='{.items[?(@.metadata.name=="sha256:480d9fc79e3cb3ab9dce3c7e69aca7f9e17b0ae1f9452fc5131fa62d818e674d")].dockerImageReference}') $(oc get image -o jsonpath='{.items[?(@.metadata.name=="sha256:3d079004939a77899fa682e20b7ee61ec65d082dc4383b97f98a4ede995b69d7")].dockerImageReference}') $(oc get image -o jsonpath='{.items[?(@.metadata.name=="sha256:30369cec0cf2ecfcf8c568342797b7bd8e59e0501916b1a6242819423eada9da")].dockerImageReference}'); do podman pull $i; done
-- sudo podman save -o image.tar $i
for i in $(sudo podman images --format "table {{.ID}}" -n); do (( x++ )); podman save -o images-$x.tar $i; done
mv images-* /home/aliv/images/
...
scp -r aliv@ocp-dev:/home/aliv/images/ .
for i in $(ls images/); do podman load -i images/$i; done

for x in $(oc get secrets -n $ns --no-headers -o jsonpath='{.items[*].metadata.name}'); do oc get secret $x -n $ns -o yaml | sed "s/namespace: $ns/namespace: $ns1/g" | oc create -f -; done
for x in $(oc get cm -n $ns --no-headers -o jsonpath='{.items[*].metadata.name}'); do oc get cm $x -n $ns -o yaml | sed "s/namespace: $ns/namespace: $ns1/g" | oc create -f -; done
oc get secret argocd-default-cluster-config -n $ns -o yaml | sed "s/namespace: $ns/namespace: $ns1/g" | oc create -f -

*****
for r in $(oc api-resources | grep -v -e pods -e bindings -e clusterserviceversions -e packagemanifests -e localsubjectaccessreviews -e localresourceaccessreviews -e selfsubjectrulesreviews -e subjectrulesreviews -e imagestreamimports -e imagestreammappings | grep true | awk '{printf "%s ",$1}  END {print ""}'); do for x in $(oc get $r -n $ns --no-headers -o jsonpath='{.items[*].metadata.name}'); do oc get $r $x -n $ns -o yaml | sed "s/namespace: $ns/namespace: $ns1/g" | oc create -f -; done ; done
-----
for r in $(oc api-resources | grep -v -e pods -e bindings -e clusterserviceversions -e packagemanifests -e localsubjectaccessreviews -e localresourceaccessreviews -e selfsubjectrulesreviews -e subjectrulesreviews -e imagestreamimports -e imagestreammappings | grep true | awk '{printf "%s ",$1}  END {print ""}'); do printf "$r\n"; oc get $r -n $ns; done | less
*****

oc -n $ns exec -it $(oc -n $ns get po -l app=$a --no-headers -o jsonpath='{.items[0].metadata.name}') -c istio-proxy -- /bin/sh
oc delete pod $p --grace-period=0 --force -n $ns

i=1; v=6; x=10; echo Going to sleep for $(( v*x )) seconds...; while [ $i -le $v ]; do sleep $x; echo I have now been sleeping for $(( i*x)) seconds...; (( i++ )) ; done; echo "Waking up!"; i=; v=; x=;

rs=($(oc get rs -l app=$a --sort-by=.metadata.creationTimestamp -o custom-columns=':metadata.name' --no-headers | tac | awk '{printf "%s ",$0} END {print ""}')); for r in ${rs[@]:1}; do oc delete rs $r; done
oc get rs -A -o wide --no-headers | awk '{if ($3 + $4 + $5 == 0) print "kubectl delete rs -n "$1, $2 }' | sh
oc get rs --no-headers -o wide | awk '{if ($2 + $3 + $4 == 0) print "oc delete rs "$1 }' | sh && oc get rs --no-headers -o wide | awk '{if ($2 + $3 + $4 == 0) print "oc delete rs "$1 }' | sh

oc get cm istio-grafana -n istio-system -o yaml
oc get cm grafana -n user-workload-monitoring -o yaml | grep "admin_password = " | awk '{print $11}' | sed 's/\\n\\n#//g'

kubectl top pod -n istio-system --containers
oc exec $pod -- /bin/bash -c cat /sys/fs/cgroup/memory/memory.usage_in_bytes & cat /sys/fs/cgroup/cpu/cpuacct.usage

oc get po -o go-template='{{range .items}}{{.metadata.name}}{{"\n"}}{{end}}'
oc get servicemonitor --all-namespaces --no-headers | grep -v openshift | awk '{print $1 " " $2}' | awk '{print "oc get servicemonitor " $2 " -n " $1 " -o yaml"}' | sh | grep -e namespace: -e " name:" -e path: | less

echo $(oc get secret openshift-gitops-cluster -n openshift-gitops -o yaml | grep admin.password: | sed 's/admin.password: //g') | base64 -d | less
echo $(oc get secret argocd-cluster -o yaml | grep admin.password: | sed 's/admin.password: //g') | base64 -d | less
echo $(oc get secret repo-2109007301 -o yaml | grep url: | sed 's/url: //g') | base64 -d | less && echo $(oc get secret repo-2109007301 -o yaml | grep insecure: | sed 's/insecure: //g') | base64 -d | less

oc get svc kubernetes -n default -o jsonpath='{.spec.clusterIP}'

oc create secret generic repo-2109007301 --from-literal name=aliv-dev --from-literal project=default --from-file sshPrivateKey=ssh-directory/id_rsa.key --from-literal type=git --from-literal url=ssh://git@github.com:22/~alxivanov/aliv-dev.git
oc label secret repo-2109007301 argocd.argoproj.io/secret-type=repository && oc annotate secret repo-2109007301 managed-by=argocd.argoproj.io
oc label namespace $ns argocd.argoproj.io/managed-by=$ns1

find path/to/dir \( -type d -name .git -prune \) -o -type f -print0 | xargs -0 sed -i "s/namespace: $ns/namespace: $ns1/g"

for p in $(oc get pipelinerun -o json | jq -r '.items[] | select(.status.conditions[].reason=="Failed") | .metadata.name '); do oc delete pipelinerun $p; done &&
for p in $(oc get pipelinerun -o json | jq -r '.items[] | select(.status.conditions[].status=="False") | .metadata.name '); do oc delete pipelinerun $p; done
oc delete pipelinerun $(oc get pipelinerun --no-headers | awk '{print $1}')

oc -n $n patch dc $d -p '{"spec":{"template":{"metadata":{"annotations":{"traffic.sidecar.istio.io/excludeOutboundIPRanges:": "'172.30.0.1/32'"}}}}}'

oc logs -l tekton.dev/pipelineTask=maven-verify -c step-maven-verify --follow
oc logs -l tekton.dev/pipelineTask=fetch-image-ref
oc logs -l tekton.dev/pipelineTask=assemble-containerimage -c step-build-container-image | less
oc delete pods --field-selector 'status.phase!=Running'

for x in $(oc get secret --no-headers -o jsonpath='{.items[*].metadata.name}'); do echo $x | grep text | awk '{printf "oc delete secret " $0}' | sh; done
oc get events --sort-by='.metadata.creationTimestamp' -A | grep $(oc project | grep -oP '(?<=").*?(?=")' | head -1)

oc create secret generic ssh-auth --type=kubernetes.io/ssh-auth --from-file=ssh-privatekey=ssh-directory/id_rsa.key --from-file=known_hosts=ssh-directory/known_hosts
oc annotate secret ssh-auth tekton.dev/git-0=github.com
oc create secret tls argocd-server-tls --from-file=tls.key=certs/tls.key --from-file=tls.crt=certs/tls.crt
oc patch cm argocd-ssh-known-hosts-cm -p "{\"data\":{\"ssh_known_hosts\": \"$(cat known_hosts)\"}}"

argocd login $(oc get route argocd-server -o jsonpath='{.spec.host}') --username=admin --password=$(oc get secret argocd-cluster -o jsonpath='{.data.admin\.password}' | base64 -d)
argocd app get $app --refresh --server=$(oc get route argocd-server -o jsonpath='{.spec.host}') | grep "Sync Status:"
argocd app sync $app --server=$(oc get route argocd-server -o jsonpath='{.spec.host}') --auth-token=$(cat argocd-token)

~*~*~*~*~*~*~*~
oc exec $(oc get po -l tekton.dev/pipelineTask=assemble-containerimage --no-headers -o jsonpath='{.items[*].metadata.name}') -- /bin/bash -c cat /sys/fs/cgroup/memory/memory.usage_in_bytes & cat /sys/fs/cgroup/cpu/cpuacct.usage
oc exec $(oc get po -l tekton.dev/pipelineTask=maven-dependency-track --no-headers -o jsonpath='{.items[*].metadata.name}') -- /bin/bash -c cat /sys/fs/cgroup/memory/memory.usage_in_bytes & cat /sys/fs/cgroup/cpu/cpuacct.usage
oc exec $(oc get po -l tekton.dev/pipelineTask=update-imagestream-tag --no-headers -o jsonpath='{.items[*].metadata.name}') -- /bin/bash -c cat /sys/fs/cgroup/memory/memory.usage_in_bytes & cat /sys/fs/cgroup/cpu/cpuacct.usage
oc exec $(oc get po -l tekton.dev/pipelineTask=fetch-image-ref --no-headers -o jsonpath='{.items[*].metadata.name}') -- /bin/bash -c cat /sys/fs/cgroup/memory/memory.usage_in_bytes & cat /sys/fs/cgroup/cpu/cpuacct.usage
oc exec $(oc get po -l tekton.dev/pipelineTask=maven-verify --no-headers -o jsonpath='{.items[*].metadata.name}') -- /bin/bash -c cat /sys/fs/cgroup/memory/memory.usage_in_bytes & cat /sys/fs/cgroup/cpu/cpuacct.usage
oc exec $(oc get po -l tekton.dev/pipelineTask=maven-deploy --no-headers -o jsonpath='{.items[*].metadata.name}') -- /bin/bash -c cat /sys/fs/cgroup/memory/memory.usage_in_bytes & cat /sys/fs/cgroup/cpu/cpuacct.usage
oc exec $(oc get po -l tekton.dev/pipelineTask=maven-sonar --no-headers -o jsonpath='{.items[*].metadata.name}') -- /bin/bash -c cat /sys/fs/cgroup/memory/memory.usage_in_bytes & cat /sys/fs/cgroup/cpu/cpuacct.usage
~*~*~*~*~*~*~*~

for d in $(ll -d */ | awk '{print $10}'); do du -shm $d; done
for d in $(ll | awk '{print $10}'); do du -shk $d; done

oc get secret registry-config.json -n $n -o yaml | grep config.json: | sed 's/  config.json: //g' | base64 -d | grep '"auth":' | sed 's/      "auth": //g' | sed 's/"//g' | base64 -d


oc create secret generic argocd-appliactions-repo --from-literal name=argocd-applications --from-literal project=default --from-file sshPrivateKey=ssh-directory/id_rsa.key --from-literal type=git --from-literal url=ssh://git@github.com:22/~alxivanov/argocd-applications.git
oc label secret argocd-appliactions-repo argocd.argoproj.io/secret-type=repository && oc annotate secret argocd-appliactions-repo managed-by=argocd.argoproj.io


url=$(oc get secret -n openshift-monitoring grafana-datasources-v2 -o jsonpath='{.data.prometheus\.yaml}' | base64 -d | jq '.datasources[0].url' | sed 's/"//g')
pwd=$(oc get secret -n openshift-monitoring grafana-datasources-v2 -o jsonpath='{.data.prometheus\.yaml}' | base64 -d | jq '.datasources[0].secureJsonData.basicAuthPassword' | sed 's/"//g')
usr=$(oc get secret -n openshift-monitoring grafana-datasources-v2 -o jsonpath='{.data.prometheus\.yaml}' | base64 -d | jq '.datasources[0].basicAuthUser' | sed 's/"//g')


oc describe node -l node-role.kubernetes.io/worker="",node-role.kubernetes.io/infra!="",node-role.kubernetes.io/storage!="" | grep Capacity: -A6 | grep pods: | sed 's/  pods:               //g' | awk '{s+=$1} END {print s}'


server=$(kubectl config view --minify | grep server | cut -f 2- -d ":" | tr -d " ")
s=$(oc get serviceaccount prometheus-k8s -o json | jq -Mr '.secrets[].name | select(contains("token"))')
t=$(oc get secret $s -o json | jq -Mr '.data.token' | base64 -d)
n=$(oc get node | grep master | awk '{print $1}' | head -1)
curl -k -H "Authorization: Bearer $t" $server/api/v1/nodes/$n/proxy/metrics/cadvisor
t=$(oc describe secret $(oc get secret | grep default-token | awk '{print $1}' | head -1) | grep -E '^token' | cut -f2 -d':' | tr -d " ")
curl -X POST $server/api/v1/namespaces/$ns/$r --header "Authorization: Bearer $t" --insecure -H 'Content-Type: application/yaml' --data '<yaml>'


for x in $(oc get secret -o json | jq '.items[] | select(.type=="kubernetes.io/service-account-token") | .metadata.name' | sed 's/"//g'); do curl -k -H "Authorization: Bearer $(oc describe secret $x | grep -E '^token' | cut -f2 -d':' | tr -d ' ')" $server/api/v1/nodes/$n/proxy/metrics; done

app=test-app
email=alexei.ivanov@soprasteria.com
oc annotate app $app notifications.argoproj.io/subscribe.on-out-of-sync.email=$email && oc annotate app $app notifications.argoproj.io/subscribe.on-sync-status-unknown.email=$email
oc create secret generic repo --from-literal name=repo --from-literal project=default --from-literal sshPrivateKey=$(oc get secret -n $ns bitbucket-ssh-key -o yaml | grep  ssh-privatekey: | sed 's/  ssh-privatekey: //g' | base64 -d) --from-literal type=git --from-literal url=ssh://git@github.com:22/project/repo.git && oc label secret repo argocd.argoproj.io/secret-type=repository && oc annotate secret repo managed-by=argocd.argoproj.io

oc create secret generic tor-repo --from-literal name=tor-repo --from-literal project=default --from-file sshPrivateKey=ssh-directory/id_rsa.key --from-literal type=git --from-literal url=ssh://git@github.com:22/project/repo.git

oc get secret gateway-cert -n istio-system -o yaml | grep "  tls.crt: " | sed 's/  tls.crt: //g' | base64 -d | less
oc patch secret argocd-default-cluster-config -p '{"data":{"clusterResources":"dHJ1ZQ=="}}' # true

for n in $(oc get project --no-headers | awk '{print $1}'); do oc get rolebinding system:openshift:scc:anyuid -n $n  -o json | jq '.subjects'; done


oc get secret registry-config.json -n $ns -o yaml | grep config.json: | sed 's/  config.json: //g' | base64 -d | grep '"auth":' | sed 's/      "auth": //g' | sed 's/"//g'
oc get secret maven-settings.xml -n $ns -o yaml | grep settings.xml: | sed 's/  settings.xml: //g' | base64 -d

for x in $(sudo podman images | grep "<none>" | awk '{print $3}'); do sudo podman rmi $x; done

OLD_IMAGE_REF=$(cat $params.DEPLOYMENT_CONFIG | grep spec: -A10000 | grep template: -A10000 | grep spec: -A10000 | grep containers: -A10000 | grep -o "image:.*" | sed 's#image: ##g')

oc get smmr default -n istio-system -o json | jq -r '.spec.members' | jq yamlify2 -r -


for x in $(oc get po -n $ns --field-selector 'status.phase!=Running' --no-headers -o jsonpath={.items[*].metadata.name}); do oc delete po $x -n $ns; done

~~~ * ~~~
oc patch <resource> <name> -p '{"metadata":{"finalizers":[]}}' --type=merge
~~~ * ~~~

pv=$(oc get pvc $p -o jsonpath='{.spec.volumeName}') && oc delete pvc $p && oc delete pv $pv
oc patch pv $(oc get pvc $p -o jsonpath='{.spec.volumeName}') -p '{"spec":{"persistentVolumeReclaimPolicy":"Retain"}}'

#RUN echo '-----BEGIN CERTIFICATE-----' > /usr/local/share/ca-certificates/ca-cert.pem \
#    && base64 -w 0 /usr/local/share/ca-certificates/ca-cert.crt >> /usr/local/share/ca-certificates/ca-cert.pem \
#    && echo $'\n-----END CERTIFICATE-----' >> /usr/local/share/ca-certificates/ca-cert.pem \
#    && rm -rf /usr/local/share/ca-certificates/ca-cert.crt \

for f in $(find files/Pipeline/ -type f -name 'npm-*-Task.yml' && find files/Pipeline/ -type f -name 'maven-*-Task.yml' && find files/Pipeline/ -type f -name 'assemble*' && find files/Pipeline/ -type f -name 'report*'); do sed -i 's/IfNotPresent/Always/g' $f; done

for n in $(oc get node | grep worker2 | awk '{print $1}'); do oc debug node/$n; done
chroot /host
for i in $(podman images | grep v1.0.1 | awk '{print $3}'); do podman rmi $i; done

for b in $(oc get build -o json | jq '.items[] | select(.status.phase=="Running") | .metadata.name'); do oc cancel-build $b; done

oc start-build bc/builder-node18 && oc start-build bc/builder-node16 && oc start-build bc/builder-node14 && oc start-build bc/builder-maven-java17 && oc start-build bc/builder-maven-java11 && oc start-build bc/builder-maven-java11 && oc start-build bc/builder-node-sonar && oc start-build bc/builder-tag-strategy

for t in $(oc get task --no-headers | awk '{print $1}'); do oc delete task $t; done


*****
kubectl config set-context --current --namespace=argocd \
&& argocd login $(oc get route argocd-server -o jsonpath='{.spec.host}') --core \
&& argocd app sync build-images --server=$(oc get route argocd-server -o jsonpath='{.spec.host}')
*****

NPMRC=$(cat secrets/.npmrc | base64 | tr -d '\n') && oc patch secret npmrc-config --type=merge -p '{"data":{".npmrc":"'${NPMRC}'"}}' && NPMRC=$(cat secrets/.npmrc-indre | base64 | tr -d '\n') && oc patch secret npmrc-config --type=merge -p '{"data":{".npmrc-indre":"'${NPMRC}'"}}' && NPMRC=$(cat secrets/.npmrc-ytre | base64 | tr -d '\n') && oc patch secret npmrc-config --type=merge -p '{"data":{".npmrc-ytre":"'${NPMRC}'"}}'
MVN_SETTINGS=$(cat secrets/settings.xml | base64 | tr -d '\n') && oc patch secret maven-settings.xml --type=merge -p '{"data":{"settings.xml":"'${MVN_SETTINGS}'"}}' && MVN_SETTINGS=$(cat secrets/settings-indre.xml | base64 | tr -d '\n') && oc patch secret maven-settings.xml --type=merge -p '{"data":{"settings-indre.xml":"'${MVN_SETTINGS}'"}}' && MVN_SETTINGS=$(cat secrets/settings-ytre.xml | base64 | tr -d '\n') && oc patch secret maven-settings.xml --type=merge -p '{"data":{"settings-ytre.xml":"'${MVN_SETTINGS}'"}}'
CONFIG=$(cat secrets/config.json | base64 | tr -d '\n') && oc patch secret registry-config.json --type=merge -p '{"data":{"config.json":"'${CONFIG}'"}}' && CONFIG=$(cat secrets/config-indre.json | base64 | tr -d '\n') && oc patch secret registry-config.json --type=merge -p '{"data":{"config-indre.json":"'${CONFIG}'"}}' && CONFIG=$(cat secrets/config-ytre.json | base64 | tr -d '\n') && oc patch secret registry-config.json --type=merge -p '{"data":{"config-ytre.json":"'${CONFIG}'"}}'

*****
oc exec $(oc get po -l app=istio-ingressgateway --no-headers -n istio-system | awk '{print $1}' | tail -1) -n istio-system -- curl -s http://localhost:15000/certs | jq '.[]' | jq '.[]'  | jq '.[]' | jq '.[] | select(.subject_alt_names[0].dns == "*.apps.ocp.example.com")' | jq -r '.days_until_expiration' | tail -1
*****

oc -n openshift-monitoring exec -c prometheus prometheus-k8s-0 -- curl -s 'http://localhost:9090/api/v1/alerts' 
oc create token $sa -n $ns
oc sa get-token $sa -n $ns

oc adm policy add-role-to-user system:openshift:scc:anyuid system:serviceaccount:$ns:$sa -n $ns
oc adm policy remove-role-from-user system:openshift:scc:anyuid system:serviceaccount:$ns:$sa -n $ns

oc get secret npmrc-config -n $ns -o json | jq -r '.data.".npmrc"' | base64 -d | less
oc get secret maven-settings.xml -n $ns -o json | jq -r '.data."settings.xml"' | base64 -d | less
oc get secret/registry-config.json -n $ns -o json | jq -r '.data."config.json"' | base64 -d | jq '.auths' | jq '.[]' | jq -r '.auth' | base64 -d | less

oc get resource -A | grep resource-name | awk '{print "oc get resource "$2  " -n "$1 " -o yaml"}' | sh | less

sudo podman run -i -v /home/aliv/.kube/config:/root/.kube/config:z --user=root localhost/service-mesh-monitoring/cert-check:latest

for n in $(oc get pvc --all-namespaces | grep "pvc-" | awk '!seen[$1]++' | awk '{print $1 "  " $2}' | grep "pvc-" |  awk '{print $1}'); do bash remove-pvc.sh $n; done

oc get csv,ip,subs -n openshift-operators

*****
oc get ip -n openshift-operators -o json | jq '.items | max_by(.spec.generation) | select(.spec.approval=="Manual" and .spec.approved==false) ' | jq -r '.spec."clusterServiceVersionNames"'
*****

oc get clusterversion version -o jsonpath='{.spec.clusterID}{"\n"}'
oc get clusterversion version -o jsonpath='{.status.desired.version}{"\n"}'

for p in $(oc get po -n istio-system | grep elasticsearch-cdm-istiosystemjaeger-1 | awk '{print $1}'); do oc delete po $p -n istio-system; done

echo -n "<url-encoded-string>" | python3 -c "import sys; from urllib.parse import unquote; print(unquote(sys.stdin.read()));"
